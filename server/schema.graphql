# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type MetaQueryPayload {
  count: String!
}

type Mutation {
  createProduct(data: ProductCreateInput!): Product!
  createScanHistory(data: ScanHistoryCreateInput!): ScanHistory!
  createUser(data: UserCreateInput!): User!
  deleteProduct(where: ProductWhereUniqueInput!): Product!
  deleteScanHistory(where: ScanHistoryWhereUniqueInput!): ScanHistory!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  signup(credentials: Credentials!): UserInfo!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  updateScanHistory(data: ScanHistoryUpdateInput!, where: ScanHistoryWhereUniqueInput!): ScanHistory!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Product {
  code: Float
  compared_to_category: String
  country: String
  createdAt: DateTime!
  emissions: Float
  id: String!
  palmOil: Boolean
  product_name: String!
  scanHistory(orderBy: [ScanHistoryOrderByInput!], skip: Float, take: Float, where: ScanHistoryWhereInput): [ScanHistory!]!
  updatedAt: DateTime!
}

input ProductCreateInput {
  code: Float
  compared_to_category: String
  country: String
  emissions: Float
  palmOil: Boolean
  product_name: String!
  scanHistory: ScanHistoryCreateNestedManyWithoutProductsInput
}

input ProductCreateNestedManyWithoutScanHistoriesInput {
  connect: [ProductWhereUniqueInput!]
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductOrderByInput {
  code: SortOrder
  compared_to_category: SortOrder
  country: SortOrder
  createdAt: SortOrder
  emissions: SortOrder
  id: SortOrder
  palmOil: SortOrder
  product_name: SortOrder
  updatedAt: SortOrder
}

input ProductUpdateInput {
  code: Float
  compared_to_category: String
  country: String
  emissions: Float
  palmOil: Boolean
  product_name: String
  scanHistory: ScanHistoryUpdateManyWithoutProductsInput
}

input ProductUpdateManyWithoutScanHistoriesInput {
  connect: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
}

input ProductWhereInput {
  code: IntNullableFilter
  compared_to_category: StringNullableFilter
  country: StringNullableFilter
  emissions: FloatNullableFilter
  id: StringFilter
  palmOil: BooleanNullableFilter
  product_name: StringFilter
  scanHistory: ScanHistoryListRelationFilter
}

input ProductWhereUniqueInput {
  id: String!
}

type Query {
  _productsMeta(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): MetaQueryPayload!
  _scanHistoriesMeta(orderBy: [ScanHistoryOrderByInput!], skip: Float, take: Float, where: ScanHistoryWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  me: User!
  product(where: ProductWhereUniqueInput!): Product
  products(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): [Product!]!
  scanHistories(orderBy: [ScanHistoryOrderByInput!], skip: Float, take: Float, where: ScanHistoryWhereInput): [ScanHistory!]!
  scanHistory(where: ScanHistoryWhereUniqueInput!): ScanHistory
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

type ScanHistory {
  createdAt: DateTime!
  id: String!
  products(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): [Product!]!
  updatedAt: DateTime!
  users: User
}

input ScanHistoryCreateInput {
  products: ProductCreateNestedManyWithoutScanHistoriesInput
  users: UserWhereUniqueInput!
}

input ScanHistoryCreateNestedManyWithoutProductsInput {
  connect: [ScanHistoryWhereUniqueInput!]
}

input ScanHistoryListRelationFilter {
  every: ScanHistoryWhereInput
  none: ScanHistoryWhereInput
  some: ScanHistoryWhereInput
}

input ScanHistoryOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  usersId: SortOrder
}

input ScanHistoryUpdateInput {
  products: ProductUpdateManyWithoutScanHistoriesInput
  users: UserWhereUniqueInput
}

input ScanHistoryUpdateManyWithoutProductsInput {
  connect: [ScanHistoryWhereUniqueInput!]
  disconnect: [ScanHistoryWhereUniqueInput!]
  set: [ScanHistoryWhereUniqueInput!]
}

input ScanHistoryWhereInput {
  id: StringFilter
  products: ProductListRelationFilter
  users: UserWhereUniqueInput
}

input ScanHistoryWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  scanHistory: ScanHistory
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  scanHistory: ScanHistoryWhereUniqueInput
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  scanHistoryId: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  scanHistory: ScanHistoryWhereUniqueInput
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  scanHistory: ScanHistoryWhereUniqueInput
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
